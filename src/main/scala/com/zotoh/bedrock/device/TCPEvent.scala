/*??
 * COPYRIGHT (C) 2012 CHERIMOIA LLC. ALL RIGHTS RESERVED.
 *
 * THIS IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR
 * MODIFY IT UNDER THE TERMS OF THE APACHE LICENSE,
 * VERSION 2.0 (THE "LICENSE").
 *
 * THIS LIBRARY IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * SEE THE LICENSE FOR THE SPECIFIC LANGUAGE GOVERNING PERMISSIONS
 * AND LIMITATIONS UNDER THE LICENSE.
 *
 * You should have received a copy of the Apache License
 * along with this distribution; if not, you may obtain a copy of the
 * License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 ??*/


package com.zotoh.bedrock.device

import java.io.{IOException,InputStream,OutputStream}
import java.net.{Socket,SocketException}

import com.zotoh.fwk.util.StrUte._
import com.zotoh.fwk.net.NetUte


/**
 * Events generated by a TCP device.
 *
 * @author kenl
 */
class TCPEvent(dev:Device,private var _soc:Socket) extends Event(dev) {

  private val serialVersionUID = -3310871938767923755L
  private var _enc= "utf-8"
  private var _binary=true

  /**
   * @param millis
   * @throws SocketException
   */
  protected[device] def setSocketTimeout(millis:Int) = {
    _soc.setSoTimeout(millis)
  }

  /**
   * @param enc
   */
  protected[device] def setEncoding(enc:String) = {
    _enc= nsb(enc)
  }

  /**
   * @param binary
   */
  protected[device] def setBinary(binary:Boolean) = {
    _binary= binary
  }

  /**
   * @return
   * @throws IOException
   */
  def sockOut() = {
    if (_soc==null) null else _soc.getOutputStream()
  }

  /**
   * @return
   * @throws IOException
   */
  def sockIn() = {
    if ( _soc==null) null else _soc.getInputStream()
  }

  /* (non-Javadoc)
   * @see com.zotoh.bedrock.device.Event#destroy()
   */
  override def destroy() {
    NetUte.close(_soc);
    _soc=null
  }

  /**
   * @return
   */
  def isBinary() = _binary

  /**
   * @return
   */
  def encoding() = _enc


}


